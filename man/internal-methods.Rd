% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-BindMatrix.R, R/Class-Convert.R,
%   R/Class-Mask.R, R/Class-RankTransform.R, R/Method-Arith.R,
%   R/Method-Compare.R, R/Method-Math.R, R/Method-Subassign.R, R/Method-axis.R,
%   R/Method-internal.R, R/Method-pmin.R, R/showtree.R
\name{rbind2,ANY,BPCellsMatrix-method}
\alias{rbind2,ANY,BPCellsMatrix-method}
\alias{rbind2,BPCellsMatrix,ANY-method}
\alias{cbind2,ANY,BPCellsMatrix-method}
\alias{cbind2,BPCellsMatrix,ANY-method}
\alias{rbind2,ANY,BPCellsSeed-method}
\alias{rbind2,BPCellsSeed,ANY-method}
\alias{cbind2,ANY,BPCellsSeed-method}
\alias{cbind2,BPCellsSeed,ANY-method}
\alias{convert_mode,ANY-method}
\alias{mask_matrix,ANY,ANY-method}
\alias{rank_transform,ANY-method}
\alias{/,numeric,BPCellsMatrix-method}
\alias{\%\%,numeric,BPCellsMatrix-method}
\alias{\%\%,BPCellsMatrix,numeric-method}
\alias{\%/\%,numeric,BPCellsMatrix-method}
\alias{\%/\%,BPCellsMatrix,numeric-method}
\alias{binarize,ANY-method}
\alias{<,BPCellsMatrix,numeric-method}
\alias{>,numeric,BPCellsMatrix-method}
\alias{<=,BPCellsMatrix,numeric-method}
\alias{>=,numeric,BPCellsMatrix-method}
\alias{==,BPCellsMatrix,numeric-method}
\alias{==,numeric,BPCellsMatrix-method}
\alias{expm1_slow,ANY-method}
\alias{[<-,BPCellsMatrix,ANY,ANY,matrix-method}
\alias{[<-,BPCellsMatrix,ANY,ANY,dgCMatrix-method}
\alias{[<-,BPCellsMatrix,ANY,ANY,IterableMatrix-method}
\alias{transpose_axis,ANY-method}
\alias{internal-methods}
\alias{pmin2,BPCellsMatrix,numeric-method}
\alias{pmin2,numeric,BPCellsMatrix-method}
\alias{seed<-,BPCellsMatrix-method}
\alias{path<-,BPCellsMatrix-method}
\title{House of internal methods}
\usage{
\S4method{rbind2}{ANY,BPCellsMatrix}(x, y, ...)

\S4method{rbind2}{BPCellsMatrix,ANY}(x, y, ...)

\S4method{cbind2}{ANY,BPCellsMatrix}(x, y, ...)

\S4method{cbind2}{BPCellsMatrix,ANY}(x, y, ...)

\S4method{rbind2}{ANY,BPCellsSeed}(x, y, ...)

\S4method{rbind2}{BPCellsSeed,ANY}(x, y, ...)

\S4method{cbind2}{ANY,BPCellsSeed}(x, y, ...)

\S4method{cbind2}{BPCellsSeed,ANY}(x, y, ...)

\S4method{convert_mode}{ANY}(object, mode)

\S4method{mask_matrix}{ANY,ANY}(object, mask, invert = FALSE)

\S4method{rank_transform}{ANY}(object, axis = NULL, offset = TRUE, ...)

\S4method{/}{numeric,BPCellsMatrix}(e1, e2)

\S4method{\%\%}{numeric,BPCellsMatrix}(e1, e2)

\S4method{\%\%}{BPCellsMatrix,numeric}(e1, e2)

\S4method{\%/\%}{numeric,BPCellsMatrix}(e1, e2)

\S4method{\%/\%}{BPCellsMatrix,numeric}(e1, e2)

\S4method{binarize}{ANY}(object, ...)

\S4method{<}{BPCellsMatrix,numeric}(e1, e2)

\S4method{>}{numeric,BPCellsMatrix}(e1, e2)

\S4method{<=}{BPCellsMatrix,numeric}(e1, e2)

\S4method{>=}{numeric,BPCellsMatrix}(e1, e2)

\S4method{==}{BPCellsMatrix,numeric}(e1, e2)

\S4method{==}{numeric,BPCellsMatrix}(e1, e2)

\S4method{expm1_slow}{ANY}(x)

\S4method{[}{BPCellsMatrix,ANY,ANY,matrix}(x, i, j, ...) <- value

\S4method{[}{BPCellsMatrix,ANY,ANY,dgCMatrix}(x, i, j, ...) <- value

\S4method{[}{BPCellsMatrix,ANY,ANY,IterableMatrix}(x, i, j, ...) <- value

\S4method{transpose_axis}{ANY}(object, mode)

\S4method{pmin2}{BPCellsMatrix,numeric}(e1, e2)

\S4method{pmin2}{numeric,BPCellsMatrix}(e1, e2)

\S4method{seed}{BPCellsMatrix}(x) <- value

\S4method{path}{BPCellsMatrix}(object) <- value
}
\arguments{
\item{x, y}{A \link[=BPCellsSeed-class]{BPCellsSeed} or
\link[=BPCellsMatrix-class]{BPCellsMatrix} object.}

\item{...}{Additional parameters passed into specific methods.}

\item{object}{A \link[=BPCellsSeed-class]{BPCellsSeed} or
\link[=BPCellsMatrix-class]{BPCellsMatrix} object.}

\item{mode}{Storage mode of BPCells matrix, one of \code{uint32_t} (unsigned
32-bit integer), \code{float} (32-bit real number), or \code{double} (64-bit real
number). R cannot differentiate 32-bit and 64-bit real number, so
\link[=BPCellsSeed-class]{type} method always return "double" for both \code{float}
and \code{double} mode.}

\item{mask}{Mask matrix, A \link{BPCellsSeed} or \link{BPCellsMatrix} object.
Additionally, a matrix-like object which can be coerced into
\link[Matrix:dgCMatrix-class]{dgCMatrix}.}

\item{invert}{A bool, indicates whether revert the mask.}

\item{axis}{Axis to rank values within. "col" to rank values within each
column, and "row" to rank values within each row. If \code{NULL}, will use the
storage axis of \code{object} (see \link{storage_axis}).  If \code{axis} specified is
different from the storage axis of \code{object}, \link{transpose_axis} will be
used to transpose the underlying storage order.}

\item{offset}{A bool, whether or not to add offset such that the rank of a 0
value is 0. Default: \code{TRUE}.}

\item{value}{A matrix which can be coerced into
\link[Matrix:dgCMatrix-class]{dgCMatrix}.}
}
\description{
Following methods are used by package internal, for messages purpose, usually
the method for \code{ANY} object.
}
