% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-Delayed.R, R/Class-BPCellsSeed.R,
%   R/Class-BindMatrix.R, R/Class-RenameDims.R, R/Class-Subset.R
\name{as.matrix.BPCellsDelayedOp}
\alias{as.matrix.BPCellsDelayedOp}
\alias{as.matrix,BPCellsDelayedOp-method}
\alias{as.array.BPCellsDelayedOp}
\alias{as.array,BPCellsDelayedOp-method}
\alias{type,BPCellsDelayedOp-method}
\alias{is_sparse,BPCellsDelayedOp-method}
\alias{extract_array,BPCellsDelayedOp-method}
\alias{OLD_extract_sparse_array,BPCellsDelayedOp-method}
\alias{extract_sparse_array,BPCellsDelayedOp-method}
\alias{dim,BPCellsDelayedOp-method}
\alias{dimnames,BPCellsDelayedOp-method}
\alias{t,BPCellsDelayedOp-method}
\alias{chunkdim,BPCellsDelayedOp-method}
\alias{chunkdim,BPCellsDelayedUnaryOp-method}
\alias{dim,BPCellsDelayedUnaryIsoOp-method}
\alias{dimnames,BPCellsDelayedUnaryIsoOp-method}
\alias{is_sparse,BPCellsDelayedUnaryIsoOp-method}
\alias{extract_array,BPCellsDelayedUnaryIsoOp-method}
\alias{OLD_extract_sparse_array,BPCellsDelayedUnaryIsoOp-method}
\alias{dim,BPCellsDelayedNaryIsoOp-method}
\alias{dimnames,BPCellsDelayedNaryIsoOp-method}
\alias{is_sparse,BPCellsDelayedNaryIsoOp-method}
\alias{extract_array,BPCellsDelayedNaryIsoOp-method}
\alias{OLD_extract_sparse_array,BPCellsDelayedNaryIsoOp-method}
\alias{BPCellsSeed-class}
\alias{IterableMatrix}
\alias{type,IterableMatrix-method}
\alias{as.array.IterableMatrix}
\alias{as.array,IterableMatrix-method}
\alias{extract_array,IterableMatrix-method}
\alias{OLD_extract_sparse_array,IterableMatrix-method}
\alias{extract_sparse_array,IterableMatrix-method}
\alias{is_sparse,IterableMatrix-method}
\alias{chunkdim,IterableMatrix-method}
\alias{dim,BPCellsDelayedAbind-method}
\alias{dimnames,BPCellsDelayedAbind-method}
\alias{is_sparse,BPCellsDelayedAbind-method}
\alias{extract_array,BPCellsDelayedAbind-method}
\alias{OLD_extract_sparse_array,BPCellsDelayedAbind-method}
\alias{is_noop,BPCellsDelayedRenameDims-method}
\alias{dimnames,BPCellsDelayedRenameDims-method}
\alias{dim,BPCellsDelayedSubset-method}
\alias{dimnames,BPCellsDelayedSubset-method}
\alias{is_sparse,BPCellsDelayedSubset-method}
\alias{extract_array,BPCellsDelayedSubset-method}
\alias{OLD_extract_sparse_array,BPCellsDelayedSubset-method}
\alias{is_noop,BPCellsDelayedSubset-method}
\alias{chunkdim,BPCellsDelayedSubset-method}
\title{Seed Contract methods for \code{IterableMatrix} and \code{BPCellsDelayedOp} object}
\usage{
\method{as.matrix}{BPCellsDelayedOp}(x, drop = FALSE)

\S4method{as.matrix}{BPCellsDelayedOp}(x, drop = FALSE)

\method{as.array}{BPCellsDelayedOp}(x, drop = FALSE)

\S4method{as.array}{BPCellsDelayedOp}(x, drop = FALSE)

\S4method{type}{BPCellsDelayedOp}(x)

\S4method{is_sparse}{BPCellsDelayedOp}(x)

\S4method{extract_array}{BPCellsDelayedOp}(x, index)

\S4method{OLD_extract_sparse_array}{BPCellsDelayedOp}(x, index)

\S4method{extract_sparse_array}{BPCellsDelayedOp}(x, index)

\S4method{dim}{BPCellsDelayedOp}(x)

\S4method{dimnames}{BPCellsDelayedOp}(x)

\S4method{t}{BPCellsDelayedOp}(x)

\S4method{chunkdim}{BPCellsDelayedOp}(x)

\S4method{chunkdim}{BPCellsDelayedUnaryOp}(x)

\S4method{dim}{BPCellsDelayedUnaryIsoOp}(x)

\S4method{dimnames}{BPCellsDelayedUnaryIsoOp}(x)

\S4method{is_sparse}{BPCellsDelayedUnaryIsoOp}(x)

\S4method{extract_array}{BPCellsDelayedUnaryIsoOp}(x, index)

\S4method{OLD_extract_sparse_array}{BPCellsDelayedUnaryIsoOp}(x, index)

\S4method{dim}{BPCellsDelayedNaryIsoOp}(x)

\S4method{dimnames}{BPCellsDelayedNaryIsoOp}(x)

\S4method{is_sparse}{BPCellsDelayedNaryIsoOp}(x)

\S4method{extract_array}{BPCellsDelayedNaryIsoOp}(x, index)

\S4method{OLD_extract_sparse_array}{BPCellsDelayedNaryIsoOp}(x, index)

\S4method{type}{IterableMatrix}(x)

\method{as.array}{IterableMatrix}(x, drop = FALSE)

\S4method{as.array}{IterableMatrix}(x, drop = FALSE)

\S4method{extract_array}{IterableMatrix}(x, index)

\S4method{OLD_extract_sparse_array}{IterableMatrix}(x, index)

\S4method{extract_sparse_array}{IterableMatrix}(x, index)

\S4method{is_sparse}{IterableMatrix}(x)

\S4method{chunkdim}{IterableMatrix}(x)

\S4method{dim}{BPCellsDelayedAbind}(x)

\S4method{dimnames}{BPCellsDelayedAbind}(x)

\S4method{is_sparse}{BPCellsDelayedAbind}(x)

\S4method{extract_array}{BPCellsDelayedAbind}(x, index)

\S4method{OLD_extract_sparse_array}{BPCellsDelayedAbind}(x, index)

\S4method{is_noop}{BPCellsDelayedRenameDims}(x)

\S4method{dimnames}{BPCellsDelayedRenameDims}(x)

\S4method{dim}{BPCellsDelayedSubset}(x)

\S4method{dimnames}{BPCellsDelayedSubset}(x)

\S4method{is_sparse}{BPCellsDelayedSubset}(x)

\S4method{extract_array}{BPCellsDelayedSubset}(x, index)

\S4method{OLD_extract_sparse_array}{BPCellsDelayedSubset}(x, index)

\S4method{is_noop}{BPCellsDelayedSubset}(x)

\S4method{chunkdim}{BPCellsDelayedSubset}(x)
}
\arguments{
\item{x}{A \code{IterableMatrix} or \code{BPCellsDelayedOp} object.}

\item{drop}{A bool, if \code{TRUE}, any extents of length one will be removed and
return an atomic vector.}

\item{index}{
    An unnamed list of integer vectors, one per dimension in \code{x}.
    Each vector is called a \emph{subscript} and can only contain
    positive integers that are valid 1-based indices along the corresponding
    dimension in \code{x}.

    Empty or missing subscripts are allowed. They must be represented
    by list elements set to \code{integer(0)} or \code{NULL}, respectively.

    The subscripts cannot contain NAs or non-positive values.

    Individual subscripts are allowed to contain duplicated indices.
  }
}
\value{
\itemize{
\item \code{as.matrix}: A dense matrix or an atomic vector.
}

\itemize{
\item \code{as.array}: A dense matrix or an atomic vector.
}

\itemize{
\item \code{type}: A string, indicates the storage type. For all BPCells matrix type
of \code{float} and \code{double}, always return \code{double} since R cannot
differentiate 32-bit and 64-bit real number. See
\link[=convert_mode]{storage_mode}.
}

\itemize{
\item \code{extract_array}: A dense matrix.
}

\itemize{
\item \code{OLD_extract_sparse_array}: A
\link[DelayedArray:SparseArraySeed-class]{SparseArraySeed} object.
}

\itemize{
\item \code{extract_sparse_array}: A
\link[SparseArray:SVT_SparseArray-class]{SparseArray} object.
}

\itemize{
\item \code{chunkdim}: the chunk dimensions in an integer vector parallel to \code{dim(x)}.
}
}
\description{
Seed Contract methods for \code{IterableMatrix} and \code{BPCellsDelayedOp} object
}
