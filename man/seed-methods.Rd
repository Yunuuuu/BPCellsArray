% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Method-binarize.R, R/Method-bind.R,
%   R/Method-crossprod.R, R/Method-internal.R, R/Method-multiplication.R,
%   R/Method-path.R, R/Method-subset.R, R/Transform-Round.R,
%   R/Transform-expm1.R, R/Transform-expm1_slow.R, R/Transform-log1p.R,
%   R/Transform-log1p_slow.R, R/Transform-min_by_col.R,
%   R/Transform-min_by_row.R, R/Transform-min_scalar.R, R/Transform-pow.R,
%   R/Transform-pow_slow.R
\name{binarize,BPCellsSeed-method}
\alias{binarize,BPCellsSeed-method}
\alias{<,numeric,BPCellsSeed-method}
\alias{>,BPCellsSeed,numeric-method}
\alias{<=,numeric,BPCellsSeed-method}
\alias{>=,BPCellsSeed,numeric-method}
\alias{rbind2,BPCellsSeed,BPCellsSeed-method}
\alias{rbind,BPCellsSeed-method}
\alias{arbind,BPCellsSeed-method}
\alias{bindROWS,BPCellsSeed-method}
\alias{cbind2,BPCellsSeed,BPCellsSeed-method}
\alias{cbind,BPCellsSeed-method}
\alias{acbind,BPCellsSeed-method}
\alias{bindCOLS,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,dgCMatrix-method}
\alias{crossprod,dgCMatrix,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,matrix-method}
\alias{crossprod,matrix,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,numeric-method}
\alias{crossprod,numeric,BPCellsSeed-method}
\alias{seed-methods}
\alias{\%*\%,BPCellsSeed,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,dgCMatrix-method}
\alias{\%*\%,dgCMatrix,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,matrix-method}
\alias{\%*\%,matrix,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,numeric-method}
\alias{\%*\%,numeric,BPCellsSeed-method}
\alias{path,BPCellsColBindMatrixSeed-method}
\alias{path,BPCellsRowBindMatrixSeed-method}
\alias{path,BPCellsConvertSeed-method}
\alias{path,BPCellsdgCMatrixSeed-method}
\alias{path,BPCellsDirSeed-method}
\alias{path,BPCellsMaskSeed-method}
\alias{path,BPCellsMultiplySeed-method}
\alias{path,BPCellsRankTransformSeed-method}
\alias{path,BPCellsRenameDimsSeed-method}
\alias{path,BPCellsSubsetSeed-method}
\alias{path,BPCellsTransformedSeed-method}
\alias{[,BPCellsColBindMatrixSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsRowBindMatrixSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsConvertSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsdgCMatrixSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsDirSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsMaskSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsMultiplySeed,ANY,ANY,ANY-method}
\alias{[,BPCellsRankTransformSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsRenameDimsSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsSubsetSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsTransformedSeed,ANY,ANY,ANY-method}
\alias{round,BPCellsSeed-method}
\alias{expm1,BPCellsSeed-method}
\alias{expm1_slow}
\alias{expm1_slow,BPCellsSeed-method}
\alias{log1p,BPCellsSeed-method}
\alias{log1p_slow}
\alias{log1p_slow,BPCellsSeed-method}
\alias{pmin_by_col}
\alias{pmin_by_col,BPCellsSeed-method}
\alias{pmin_by_row}
\alias{pmin_by_row,BPCellsSeed-method}
\alias{pmin_scalar}
\alias{pmin_scalar,BPCellsSeed-method}
\alias{^,BPCellsSeed,ANY-method}
\alias{pow_slow}
\alias{pow_slow,BPCellsSeed-method}
\title{House of BPCellsSeed methods}
\usage{
\S4method{binarize}{BPCellsSeed}(object, threshold = 0, strict_inequality = TRUE)

\S4method{<}{numeric,BPCellsSeed}(e1, e2)

\S4method{>}{BPCellsSeed,numeric}(e1, e2)

\S4method{<=}{numeric,BPCellsSeed}(e1, e2)

\S4method{>=}{BPCellsSeed,numeric}(e1, e2)

\S4method{rbind2}{BPCellsSeed,BPCellsSeed}(x, y, ..., threads = 0L)

\S4method{rbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE, deparse.level = 1L)

\S4method{arbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE)

\S4method{bindROWS}{BPCellsSeed}(
  x,
  objects = list(),
  use.names = TRUE,
  ignore.mcols = TRUE,
  check = TRUE
)

\S4method{cbind2}{BPCellsSeed,BPCellsSeed}(x, y, ..., threads = 0L)

\S4method{cbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE, deparse.level = 1L)

\S4method{acbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE)

\S4method{bindCOLS}{BPCellsSeed}(
  x,
  objects = list(),
  use.names = TRUE,
  ignore.mcols = TRUE,
  check = TRUE
)

\S4method{crossprod}{BPCellsSeed,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,dgCMatrix}(x, y)

\S4method{crossprod}{dgCMatrix,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,matrix}(x, y)

\S4method{crossprod}{matrix,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,numeric}(x, y)

\S4method{crossprod}{numeric,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,dgCMatrix}(x, y)

\S4method{\%*\%}{dgCMatrix,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,matrix}(x, y)

\S4method{\%*\%}{matrix,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,numeric}(x, y)

\S4method{\%*\%}{numeric,BPCellsSeed}(x, y)

\S4method{path}{BPCellsColBindMatrixSeed}(object)

\S4method{path}{BPCellsRowBindMatrixSeed}(object)

\S4method{path}{BPCellsConvertSeed}(object)

\S4method{path}{BPCellsdgCMatrixSeed}(object)

\S4method{path}{BPCellsDirSeed}(object)

\S4method{path}{BPCellsMaskSeed}(object)

\S4method{path}{BPCellsMultiplySeed}(object)

\S4method{path}{BPCellsRankTransformSeed}(object)

\S4method{path}{BPCellsRenameDimsSeed}(object)

\S4method{path}{BPCellsSubsetSeed}(object)

\S4method{path}{BPCellsTransformedSeed}(object)

\S4method{[}{BPCellsColBindMatrixSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsRowBindMatrixSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsConvertSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsdgCMatrixSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsDirSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsMaskSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsMultiplySeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsRankTransformSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsRenameDimsSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsSubsetSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsTransformedSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{round}{BPCellsSeed}(x, digits = 0)

\S4method{expm1}{BPCellsSeed}(x)

expm1_slow(x)

\S4method{expm1_slow}{BPCellsSeed}(x)

\S4method{log1p}{BPCellsSeed}(x)

log1p_slow(x)

\S4method{log1p_slow}{BPCellsSeed}(x)

pmin_by_col(object, values)

\S4method{pmin_by_col}{BPCellsSeed}(object, values)

pmin_by_row(object, values)

\S4method{pmin_by_row}{BPCellsSeed}(object, values)

pmin_scalar(object, value)

\S4method{pmin_scalar}{BPCellsSeed}(object, value)

\S4method{^}{BPCellsSeed,ANY}(e1, e2)

pow_slow(e1, e2)

\S4method{pow_slow}{BPCellsSeed}(e1, e2)
}
\arguments{
\item{threshold}{A numeric value that determines whether the elements
of x are set to zero or one.}

\item{strict_inequality}{A logical value determining whether the
comparison to the threshold is >= (strict_inequality=FALSE)
or > (strict_inequality=TRUE).}

\item{e1, e2}{See detailed methods signature.}

\item{x, y, object}{A \link[=BPCellsSeed-class]{BPCellsSeed} object.}

\item{...}{\itemize{
\item \code{rbind2} and \code{cbind2}: Not used currently.
\item \code{rbind}, \code{arbind}, \code{cbind}, and \code{acbind}: A list of
\link[=BPCellsSeed-class]{BPCellsSeed} objects.
\item \code{[} and \verb{[<-}: Not used currently.
}}

\item{threads}{Set number of threads to use for sparse-dense multiply and
\link[BPCells:matrix_stats]{matrix_stats}.}

\item{use.first.dimnames}{Ignored, always be \code{TRUE} in BPCells.}

\item{deparse.level}{Ignored, used by generic methods.}

\item{objects}{
    A list of S4 objects to bind to \code{x}. They should typically (but not
    necessarily) have the same class as \code{x}.
  }

\item{use.names}{Ignored, always be \code{TRUE}.}

\item{ignore.mcols}{Ignored.}

\item{check}{Ignored.}

\item{i, j}{Row and Column index.}

\item{drop}{Ignored, always be \code{FALSE}.}

\item{digits}{Integer indicating the number of decimal places}

\item{values}{A positive atomic numeric.}

\item{value}{\itemize{
\item \verb{dimnames<-}: A list of dimnames or \code{NULL}.
\item \verb{[<-}: A matrix which can be coerced into
\link[Matrix:dgCMatrix-class]{dgCMatrix}.
\item \code{pmin_scalar}: Single positive numeric value.
}}
}
\description{
Following methods are used by \linkS4class{BPCellsSeed} objects, you should always
use the methods of \linkS4class{BPCellsMatrix}
}
