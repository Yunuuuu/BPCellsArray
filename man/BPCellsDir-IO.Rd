% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-Dir.R
\name{BPCellsDir-IO}
\alias{BPCellsDir-IO}
\alias{readBPCellsDirMatrix}
\alias{writeBPCellsDirArray}
\alias{writeBPCellsDirArray,ANY-method}
\title{Read/write sparse matrices from (or into) directory on disk}
\usage{
readBPCellsDirMatrix(path, buffer_size = 8192L)

writeBPCellsDirArray(x, ...)

\S4method{writeBPCellsDirArray}{ANY}(
  x,
  path = NULL,
  bitpacking = TRUE,
  buffer_size = 8192L,
  overwrite = FALSE
)
}
\arguments{
\item{path}{A string path of Directory to read or save the data into. For
\code{writeBPCellsDirArray}, if \code{NULL}, will use a temporary directory.}

\item{buffer_size}{For performance tuning only. The number of items to be buffered
in memory before calling writes to disk.}

\item{x}{A \code{IterableMatrix} object from \code{BPCells}, a matrix-like object which
can be coerced into dgCMatrix, or a \link[=BPCellsSeed-class]{BPCellsSeed} object.}

\item{...}{Additional arguments passed into specific methods.}

\item{bitpacking}{A bool, whether or not to compress the data using
Bitpacking Compression.}

\item{overwrite}{A bool, If \code{TRUE}, write to a temp dir then overwrite
existing data.}
}
\value{
A \link[=BPCellsMatrix-class]{BPCellsMatrix} object.
}
\description{
\itemize{
\item \code{readBPCellsDirMatrix}: read a sparce matrices from a directory on disk
\item \code{writeBPCellsDirArray}: Write a sparce matrices into a directory on disk
}
}
\details{
\subsection{Storage locations}{

Matrices can be stored in a directory on disk, in memory, or in an HDF5 file.
Saving in a directory on disk is a good default for local analysis, as it provides
the best I/O performance and lowest memory usage. The HDF5 format
allows saving within existing hdf5 files to group data together, and the in
memory format provides the fastest performance in the event memory usage is
unimportant.
}

\subsection{Bitpacking Compression}{

For typical RNA counts matrices holding integer counts, this bitpacking
compression will result in 6-8x less space than an R dgCMatrix, and 4-6x
smaller than a scipy csc_matrix. The compression will be more effective when
the count values in the matrix are small, and when the rows of the matrix are
sorted by rowMeans. In tests on RNA-seq data optimal ordering could save up
to 40\% of storage space. On non-integer data only the row indices are
compressed, not the values themselves so space savings will be smaller.

For non-integer data matrices, bitpacking compression is much less effective,
as it can only be applied to the indexes of each entry but not the values.
There will still be some space savings, but far less than for counts matrices.
}
}
