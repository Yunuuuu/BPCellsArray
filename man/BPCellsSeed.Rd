% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-BPCellsSeed.R
\docType{class}
\name{BPCellsSeed}
\alias{BPCellsSeed}
\alias{BPCellsSeed,BPCellsSeed-method}
\alias{BPCellsSeed,Iterable_dgCMatrix_wrapper-method}
\alias{BPCellsSeed,MatrixSubset-method}
\alias{BPCellsSeed,ConvertMatrixType-method}
\alias{BPCellsSeed,MatrixMultiply-method}
\alias{BPCellsSeed,RenameDims-method}
\alias{BPCellsSeed,MatrixRankTransform-method}
\alias{BPCellsSeed,MatrixMask-method}
\alias{BPCellsSeed,ColBindMatrices-method}
\alias{BPCellsSeed,RowBindMatrices-method}
\alias{BPCellsSeed,MatrixDir-method}
\alias{show,BPCellsSeed-method}
\alias{type,BPCellsSeed-method}
\alias{is_sparse,BPCellsSeed-method}
\alias{extract_array,BPCellsSeed-method}
\alias{extract_sparse_array,BPCellsSeed-method}
\alias{dimnames<-,BPCellsSeed,list-method}
\alias{dimnames<-,BPCellsSeed,NULL-method}
\alias{t,BPCellsSeed-method}
\alias{[<-,BPCellsSeed,ANY,ANY,ANY-method}
\alias{\%*\%,BPCellsSeed,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,dgCMatrix-method}
\alias{\%*\%,dgCMatrix,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,ANY-method}
\alias{\%*\%,ANY,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,matrix-method}
\alias{\%*\%,matrix,BPCellsSeed-method}
\alias{\%*\%,BPCellsSeed,numeric-method}
\alias{\%*\%,numeric,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,dgCMatrix-method}
\alias{crossprod,dgCMatrix,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,ANY-method}
\alias{crossprod,ANY,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,matrix-method}
\alias{crossprod,matrix,BPCellsSeed-method}
\alias{crossprod,BPCellsSeed,numeric-method}
\alias{crossprod,numeric,BPCellsSeed-method}
\alias{rbind2,BPCellsSeed,BPCellsSeed-method}
\alias{rbind,BPCellsSeed-method}
\alias{arbind,BPCellsSeed-method}
\alias{bindROWS,BPCellsSeed-method}
\alias{cbind2,BPCellsSeed,BPCellsSeed-method}
\alias{cbind,BPCellsSeed-method}
\alias{acbind,BPCellsSeed-method}
\alias{bindCOLS,BPCellsSeed-method}
\title{Low-level Base Class for Delayed BPCells matrix}
\usage{
BPCellsSeed(x, ...)

\S4method{BPCellsSeed}{BPCellsSeed}(x, ...)

\S4method{BPCellsSeed}{Iterable_dgCMatrix_wrapper}(x, ...)

\S4method{BPCellsSeed}{MatrixSubset}(x, ...)

\S4method{BPCellsSeed}{ConvertMatrixType}(x, ...)

\S4method{BPCellsSeed}{MatrixMultiply}(x, ...)

\S4method{BPCellsSeed}{RenameDims}(x, ...)

\S4method{BPCellsSeed}{MatrixRankTransform}(x, ...)

\S4method{BPCellsSeed}{MatrixMask}(x, ...)

\S4method{BPCellsSeed}{ColBindMatrices}(x, ...)

\S4method{BPCellsSeed}{RowBindMatrices}(x, ...)

\S4method{BPCellsSeed}{MatrixDir}(x, ...)

\S4method{show}{BPCellsSeed}(object)

\S4method{type}{BPCellsSeed}(x)

\S4method{is_sparse}{BPCellsSeed}(x)

\S4method{extract_array}{BPCellsSeed}(x, index)

\S4method{extract_sparse_array}{BPCellsSeed}(x, index)

\S4method{dimnames}{BPCellsSeed,list}(x) <- value

\S4method{dimnames}{BPCellsSeed,NULL}(x) <- value

\S4method{t}{BPCellsSeed}(x)

\S4method{[}{BPCellsSeed,ANY,ANY,ANY}(x, i, j, ...) <- value

\S4method{\%*\%}{BPCellsSeed,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,dgCMatrix}(x, y)

\S4method{\%*\%}{dgCMatrix,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,ANY}(x, y)

\S4method{\%*\%}{ANY,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,matrix}(x, y)

\S4method{\%*\%}{matrix,BPCellsSeed}(x, y)

\S4method{\%*\%}{BPCellsSeed,numeric}(x, y)

\S4method{\%*\%}{numeric,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,dgCMatrix}(x, y)

\S4method{crossprod}{dgCMatrix,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,ANY}(x, y)

\S4method{crossprod}{ANY,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,matrix}(x, y)

\S4method{crossprod}{matrix,BPCellsSeed}(x, y)

\S4method{crossprod}{BPCellsSeed,numeric}(x, y)

\S4method{crossprod}{numeric,BPCellsSeed}(x, y)

\S4method{rbind2}{BPCellsSeed,BPCellsSeed}(x, y, ..., threads = 0L)

\S4method{rbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE, deparse.level = 1L)

\S4method{arbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE)

\S4method{bindROWS}{BPCellsSeed}(
  x,
  objects = list(),
  use.names = TRUE,
  ignore.mcols = TRUE,
  check = TRUE
)

\S4method{cbind2}{BPCellsSeed,BPCellsSeed}(x, y, ..., threads = 0L)

\S4method{cbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE, deparse.level = 1L)

\S4method{acbind}{BPCellsSeed}(..., threads = 0L, use.first.dimnames = TRUE)

\S4method{bindCOLS}{BPCellsSeed}(
  x,
  objects = list(),
  use.names = TRUE,
  ignore.mcols = TRUE,
  check = TRUE
)
}
\arguments{
\item{x}{A \link{BPCellsSeed} object. For some functions:
\itemize{
\item \code{BPCellsSeed}: A \link{BPCellsSeed} object, or other BPCells \code{IterableMatrix}
object.
\item \code{\%*\%}, and \code{crossprod}: A \link{BPCellsSeed} object or matrx-like object which
can be coerced into a \link[Matrix:dgCMatrix-class]{dgCMatrix}.
}}

\item{...}{Additional arguments passed to specific methods.}

\item{object}{A \code{BPCellsSeed} object.}

\item{index}{
    An unnamed list of integer vectors, one per dimension in \code{x}.
    Each vector is called a \emph{subscript} and can only contain
    positive integers that are valid 1-based indices along the corresponding
    dimension in \code{x}.

    Empty or missing subscripts are allowed. They must be represented
    by list elements set to \code{integer(0)} or \code{NULL}, respectively.

    The subscripts cannot contain NAs or non-positive values.

    Individual subscripts are allowed to contain duplicated indices.
  }

\item{value}{\itemize{
\item \verb{dimnames<-}: A list of dimnames or \code{NULL}.
\item \verb{[<-}: A matrix which can be coerced into
\link[Matrix:dgCMatrix-class]{dgCMatrix}.
}}

\item{i, j}{Row and Column index.}

\item{y}{A \link{BPCellsSeed} object or matrx-like object which can be coerced
into a \link[Matrix:dgCMatrix-class]{dgCMatrix}.}

\item{threads}{Number of threads to use for execution. See \link{set_threads} for
details.}

\item{use.first.dimnames}{Ignored, always be \code{TRUE} in BPCells.}

\item{deparse.level}{Ignored, used by generic methods.}

\item{objects}{
    A list of S4 objects to bind to \code{x}. They should typically (but not
    necessarily) have the same class as \code{x}.
  }

\item{use.names}{Ignored, always be \code{TRUE}.}

\item{ignore.mcols}{Ignored.}

\item{check}{Ignored.}
}
\value{
\itemize{
\item \code{BPCellsSeed}: A \link{BPCellsSeed} object.
}

\itemize{
\item \code{type}: A string. For all BPCells matrix type of \code{float} and \code{double},
always return \code{double} since R cannot differentiate 32-bit and 64-bit real
number.
}

\itemize{
\item \code{is_sparse}: Always return \code{TRUE} for \code{BPCellsSeed} object.
}

\itemize{
\item \code{extract_array}: A dense matrix.
}

\itemize{
\item \code{extract_sparse_array}: A \link[DelayedArray:SparseArraySeed-class]{SparseArraySeed}
object.
}

\itemize{
\item \verb{dimnames<-}: A \link{BPCellsSeed} object, usually a \code{BPCellsRenameDimsSeed}
object.
}

\itemize{
\item \verb{[<-}: A \link{BPCellsSeed} object.
}

\itemize{
\item \code{x \%*\% y}: matrix multiplication, a \link{BPCellsSeed} object or a dense
matrix (matrix and numeric methods).
}

\itemize{
\item \code{crossprod(x, y)}: Matrix Crossproduct, a \link{BPCellsSeed} object or a dense
matrix (matrix and numeric methods).
}
}
\description{
The \code{BPCellsSeed} class just inherits from the \code{IterableMatrix} object in
BPCells package. The purpose for \code{BPCellsSeed} object is to provide the
common methods for all low-level BPCells seed objects.
}
