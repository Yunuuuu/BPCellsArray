% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Seed-Methods.R, R/Class-Transformed.R,
%   R/Method-subset.R
\name{BPCellsSeed-methods}
\alias{BPCellsSeed-methods}
\alias{show,BPCellsSeed-method}
\alias{type,BPCellsSeed-method}
\alias{is_sparse,BPCellsSeed-method}
\alias{extract_array,BPCellsSeed-method}
\alias{OLD_extract_sparse_array,BPCellsSeed-method}
\alias{extract_sparse_array,BPCellsSeed-method}
\alias{dimnames<-,BPCellsSeed,list-method}
\alias{dimnames<-,BPCellsSeed,NULL-method}
\alias{t,BPCellsSeed-method}
\alias{[<-,BPCellsSeed,ANY,ANY,ANY-method}
\alias{expm1_slow,BPCellsSeed-method}
\alias{log1p_slow,BPCellsSeed-method}
\alias{expm1,BPCellsSeed-method}
\alias{log1p,BPCellsSeed-method}
\alias{pmin_by_col,BPCellsSeed-method}
\alias{pmin_by_row,BPCellsSeed-method}
\alias{pmin_scalar,BPCellsSeed-method}
\alias{pow_slow,BPCellsSeed-method}
\alias{^,BPCellsSeed,ANY-method}
\alias{round,BPCellsSeed-method}
\alias{[,BPCellsdgCMatrixSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsDirSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsHDF5Seed,ANY,ANY,ANY-method}
\alias{[,BPCellsMemSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsColBindMatrixSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsRowBindMatrixSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsConvertSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsMaskSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsMultiplySeed,ANY,ANY,ANY-method}
\alias{[,BPCellsRankTransformSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsRenameDimsSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsSubsetSeed,ANY,ANY,ANY-method}
\alias{[,BPCellsTransformedSeed,ANY,ANY,ANY-method}
\title{House of BPCellsSeed methods}
\usage{
\S4method{show}{BPCellsSeed}(object)

\S4method{type}{BPCellsSeed}(x)

\S4method{is_sparse}{BPCellsSeed}(x)

\S4method{extract_array}{BPCellsSeed}(x, index)

\S4method{OLD_extract_sparse_array}{BPCellsSeed}(x, index)

\S4method{extract_sparse_array}{BPCellsSeed}(x, index)

\S4method{dimnames}{BPCellsSeed,list}(x) <- value

\S4method{dimnames}{BPCellsSeed,NULL}(x) <- value

\S4method{t}{BPCellsSeed}(x)

\S4method{[}{BPCellsSeed,ANY,ANY,ANY}(x, i, j, ...) <- value

\S4method{expm1_slow}{BPCellsSeed}(x)

\S4method{log1p_slow}{BPCellsSeed}(x)

\S4method{expm1}{BPCellsSeed}(x)

\S4method{log1p}{BPCellsSeed}(x)

\S4method{pmin_by_col}{BPCellsSeed}(object, values)

\S4method{pmin_by_row}{BPCellsSeed}(object, values)

\S4method{pmin_scalar}{BPCellsSeed}(object, value)

\S4method{pow_slow}{BPCellsSeed}(e1, e2)

\S4method{^}{BPCellsSeed,ANY}(e1, e2)

\S4method{round}{BPCellsSeed}(x, digits = 0)

\S4method{[}{BPCellsdgCMatrixSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsDirSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsHDF5Seed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsMemSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsColBindMatrixSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsRowBindMatrixSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsConvertSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsMaskSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsMultiplySeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsRankTransformSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsRenameDimsSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsSubsetSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsTransformedSeed,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)
}
\arguments{
\item{x, object}{A \link[=BPCellsSeed-class]{BPCellsSeed} object.}

\item{index}{
    An unnamed list of integer vectors, one per dimension in \code{x}.
    Each vector is called a \emph{subscript} and can only contain
    positive integers that are valid 1-based indices along the corresponding
    dimension in \code{x}.

    Empty or missing subscripts are allowed. They must be represented
    by list elements set to \code{integer(0)} or \code{NULL}, respectively.

    The subscripts cannot contain NAs or non-positive values.

    Individual subscripts are allowed to contain duplicated indices.
  }

\item{value}{\itemize{
\item \verb{dimnames<-}: A list of dimnames or \code{NULL}.
\item \verb{[<-}: A matrix which can be coerced into
\link[Matrix:dgCMatrix-class]{dgCMatrix}.
\item \code{pmin_scalar}: Single positive numeric value.
}}

\item{i, j}{Row and Column index.}

\item{...}{Not used currently.}

\item{values}{A positive atomic numeric.}

\item{e1, e2}{One of \code{e1} or \code{e2} must be \link[=BPCellsSeed-class]{BPCellsSeed} or
\link[=BPCellsMatrix-class]{BPCellsMatrix} object, and the another must be a
number.}

\item{digits}{Integer indicating the number of decimal places}

\item{drop}{Ignored, always be \code{FALSE}.}
}
\value{
\itemize{
\item \code{type}: A string, indicates the storage type. For all BPCells matrix type
of \code{float} and \code{double}, always return \code{double} since R cannot
differentiate 32-bit and 64-bit real number.
}

\itemize{
\item \code{is_sparse}: Always return \code{TRUE} for \code{BPCellsSeed} object.
}

\itemize{
\item \code{extract_array}: A dense matrix.
}

\itemize{
\item \code{OLD_extract_sparse_array}: A
\link[DelayedArray:SparseArraySeed-class]{SparseArraySeed} object.
}

\itemize{
\item \code{extract_sparse_array}: A
\link[SparseArray:SVT_SparseArray-class]{SparseArray} object.
}

\itemize{
\item \verb{dimnames<-}: A \link{BPCellsSeed} object, usually a \code{BPCellsRenameDimsSeed}
object.
}

\itemize{
\item \code{t}: A \link{BPCellsSeed} object.
}

\itemize{
\item \verb{[<-}: A \link{BPCellsSeed} object.
}
}
\description{
Following methods are used by \linkS4class{BPCellsSeed} objects, you should always
use the methods of \linkS4class{BPCellsMatrix}
}
\seealso{
\itemize{
\item \link[=BPCells-bind]{bind}: Combine two Objects by Columns or Rows.
\item \link[=BPCells-Multiplication]{\%*\%}: Matrix Multiplication.
\item \link[=BPCells-crossprod]{crossprod}: Matrix Crossproduct.
\item \link[=BPCells-Summarization]{summarization}: row/col summarization.
\item \link[=BPCells-Arithmetic]{Arithmetic}: Binary Arithmetic operators.
\item \link[=BPCells-binarize]{binarize}: Convert matrix elements to zeros and ones.
}
}
