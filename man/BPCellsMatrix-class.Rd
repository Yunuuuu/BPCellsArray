% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-BPCellsMatrix.R, R/Class-subset.R,
%   R/Class-Dir.R, R/Class-HDF5.R, R/Class-Mem.R, R/Class-RenameDims.R,
%   R/Class-Transformed.R
\docType{class}
\name{show,BPCellsMatrix-method}
\alias{show,BPCellsMatrix-method}
\alias{[,BPCellsMatrix,ANY,ANY,ANY-method}
\alias{[<-,BPCellsMatrix,ANY,ANY,ANY-method}
\alias{BPCellsMatrix-class}
\alias{BPCellsMatrix-methods}
\alias{BPCellsArray}
\alias{BPCellsMatrix}
\alias{BPCellsArray-class}
\alias{DelayedArray,BPCellsSeed-method}
\alias{matrixClass,BPCellsArray-method}
\alias{drop,BPCellsMatrix-method}
\alias{as.array.BPCellsMatrix}
\alias{as.array,BPCellsMatrix-method}
\alias{as.matrix.BPCellsMatrix}
\alias{as.matrix,BPCellsMatrix-method}
\alias{t,BPCellsMatrix-method}
\alias{t}
\alias{DelayedArray,BPCellsDirSeed-method}
\alias{BPCellsDirMatrix-class}
\alias{matrixClass,BPCellsDirArray-method}
\alias{DelayedArray,BPCellsHDF5Seed-method}
\alias{BPCellsHDF5Matrix-class}
\alias{matrixClass,BPCellsHDF5Array-method}
\alias{BPCellsMemArray-class}
\alias{DelayedArray,BPCellsMemSeed-method}
\alias{BPCellsMemMatrix-class}
\alias{matrixClass,BPCellsMemArray-method}
\alias{dimnames<-,BPCellsMatrix,ListOrNULL-method}
\alias{dimnames<-}
\alias{rownames<-,BPCellsMatrix,atomic-method}
\alias{rownames<-}
\alias{colnames<-,BPCellsMatrix,atomic-method}
\alias{colnames<-}
\alias{expm1_slow}
\alias{expm1_slow,BPCellsMatrix-method}
\alias{log1p_slow}
\alias{log1p_slow,BPCellsMatrix-method}
\alias{expm1,BPCellsMatrix-method}
\alias{expm1}
\alias{log1p,BPCellsMatrix-method}
\alias{log1p}
\alias{pmin_by_col}
\alias{pmin_by_col,BPCellsMatrix-method}
\alias{pmin_by_row}
\alias{pmin_by_row,BPCellsMatrix-method}
\alias{pmin_scalar}
\alias{pmin_scalar,BPCellsMatrix-method}
\alias{pow_slow}
\alias{pow_slow,BPCellsMatrix-method}
\alias{^,BPCellsMatrix,ANY-method}
\alias{^}
\alias{round,BPCellsMatrix-method}
\alias{round}
\title{DelayedArray backend of BPCells matrix}
\usage{
\S4method{show}{BPCellsMatrix}(object)

\S4method{[}{BPCellsMatrix,ANY,ANY,ANY}(x, i, j, ..., drop = FALSE)

\S4method{[}{BPCellsMatrix,ANY,ANY,ANY}(x, i, j, ...) <- value

BPCellsArray(x)

BPCellsMatrix(x)

\S4method{DelayedArray}{BPCellsSeed}(seed)

\S4method{matrixClass}{BPCellsArray}(x)

\S4method{drop}{BPCellsMatrix}(x)

\method{as.array}{BPCellsMatrix}(x, drop = FALSE)

\S4method{as.array}{BPCellsMatrix}(x, drop = FALSE)

\method{as.matrix}{BPCellsMatrix}(x)

\S4method{as.matrix}{BPCellsMatrix}(x)

\S4method{t}{BPCellsMatrix}(x)

\S4method{DelayedArray}{BPCellsDirSeed}(seed)

\S4method{matrixClass}{BPCellsDirArray}(x)

\S4method{DelayedArray}{BPCellsHDF5Seed}(seed)

\S4method{matrixClass}{BPCellsHDF5Array}(x)

\S4method{DelayedArray}{BPCellsMemSeed}(seed)

\S4method{matrixClass}{BPCellsMemArray}(x)

\S4method{dimnames}{BPCellsMatrix,ListOrNULL}(x) <- value

\S4method{rownames}{BPCellsMatrix,atomic}(x) <- value

\S4method{colnames}{BPCellsMatrix,atomic}(x) <- value

expm1_slow(x)

\S4method{expm1_slow}{BPCellsMatrix}(x)

log1p_slow(x)

\S4method{log1p_slow}{BPCellsMatrix}(x)

\S4method{expm1}{BPCellsMatrix}(x)

\S4method{log1p}{BPCellsMatrix}(x)

pmin_by_col(object, values)

\S4method{pmin_by_col}{BPCellsMatrix}(object, values)

pmin_by_row(object, values)

\S4method{pmin_by_row}{BPCellsMatrix}(object, values)

pmin_scalar(object, value)

\S4method{pmin_scalar}{BPCellsMatrix}(object, value)

pow_slow(e1, e2)

\S4method{pow_slow}{BPCellsMatrix}(e1, e2)

\S4method{^}{BPCellsMatrix,ANY}(e1, e2)

\S4method{round}{BPCellsMatrix}(x, digits = 0)
}
\arguments{
\item{object}{A \link[=BPCellsSeed-class]{BPCellsSeed} or
\link[=BPCellsMatrix-class]{BPCellsMatrix} object.}

\item{x}{\itemize{
\item \code{BPCellsArray} and \code{BPCellsMatrix}: Details see \link{BPCellsSeed} for
supported object.
\item \code{matrixClass}: A string.
}}

\item{i, j}{Row and Column index.}

\item{...}{Not used currently.}

\item{drop}{A bool, if \code{TRUE}, any extents of length one will be removed and
return an atomic vector.}

\item{value}{\itemize{
\item \verb{dimnames<-}: A list of dimnames or \code{NULL}.
\item \verb{[<-}: A matrix which can be coerced into
\link[Matrix:dgCMatrix-class]{dgCMatrix}.
\item \code{pmin_scalar}: Single positive numeric value.
}}

\item{seed}{A \code{BPCellsSeed} object.}

\item{values}{A positive atomic numeric.}

\item{e1, e2}{One of \code{e1} or \code{e2} must be \link[=BPCellsSeed-class]{BPCellsSeed} or
\link[=BPCellsMatrix-class]{BPCellsMatrix} object, and the another must be a
number.}

\item{digits}{Integer indicating the number of decimal places}
}
\value{
\itemize{
\item \code{[}: A \link{BPCellsMatrix} object or an atomic vector.
}

\itemize{
\item \verb{[<-}: A \link{BPCellsMatrix} object.
}

\itemize{
\item \code{t}: A \link{BPCellsMatrix} object.
}

\itemize{
\item \verb{dimnames<-}: A \link{BPCellsMatrix} object.
}

\itemize{
\item \verb{rownames<-}: A \link{BPCellsMatrix} object.
}

\itemize{
\item \verb{colnames<-}: A \link{BPCellsMatrix} object.
}

\itemize{
\item \code{expm1} and \code{expm1_slow}: compute \code{exp(x)-1} of matrix.
}

\itemize{
\item \code{log1p} and \code{log1p_slow}: compute \code{log(1+x)} of matrix.
}

\itemize{
\item \code{pmin_by_col}: Take the minimum with a per-col constant
}

\itemize{
\item \code{pmin_by_row}: Take the minimum with a per-row constant
}

\itemize{
\item \code{pmin_scalar}: Take minumum with a global constant
}

\itemize{
\item \code{round}: Rounding of matrix Numbers.
}
}
\description{
The \code{BPCellsMatrix} class just inherits from the
\link[DelayedArray:DelayedArray-class]{DelayedMatrix} class.
}
\section{Slots}{

\describe{
\item{\code{seed}}{A \link[=BPCellsSeed-class]{BPCellsSeed} object.}
}}

\seealso{
\itemize{
\item \link[=BPCells-bind]{bind}: Combine two Objects by Columns or Rows.
\item \link[=BPCells-Multiplication]{\%*\%}: Matrix Multiplication.
\item \link[=BPCells-crossprod]{crossprod}: Matrix Crossproduct.
\item \link[=BPCells-Summarization]{summarization}: row/col summarization.
\item \link[=BPCells-Arithmetic]{Arithmetic}: Binary Arithmetic operators.
\item \link[=BPCells-binarize]{binarize}: Convert matrix elements to zeros and ones.
}
}
